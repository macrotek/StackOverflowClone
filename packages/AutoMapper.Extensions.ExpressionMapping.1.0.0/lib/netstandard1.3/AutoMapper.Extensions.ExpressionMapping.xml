<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AutoMapper.Extensions.ExpressionMapping</name>
    </assembly>
    <members>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Extensions.VisitorExtensions.IsMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            Returns true if the expression is a direct or descendant member expression of the parameter.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Extensions.VisitorExtensions.GetPropertyFullName(System.Linq.Expressions.Expression)">
            <summary>
            Returns the fully qualified name of the member starting with the immediate child member of the parameter
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Extensions.VisitorExtensions.GetParameterExpression(System.Linq.Expressions.Expression)">
            <summary>
            Returns the ParameterExpression for the LINQ parameter.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Extensions.VisitorExtensions.MemberAccesses(System.Linq.Expressions.Expression,System.Collections.Generic.List{AutoMapper.Extensions.ExpressionMapping.Structures.PropertyMapInfo})">
            <summary>
            Adds member expressions to an existing expression.
            </summary>
            <param name="exp"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Extensions.VisitorExtensions.GetMemberFullName(System.Linq.Expressions.LambdaExpression)">
            <summary>
            For the given a Lambda Expression, returns the fully qualified name of the member starting with the immediate child member of the parameter
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Extensions.VisitorExtensions.GetUnderlyingGenericTypes(System.Type)">
            <summary>
            Returns the underlying type typeof(T) when the type implements IEnumerable.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Impl.ISourceInjectedQueryable`1.OnEnumerated(System.Action{System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Called when [enumerated].
            </summary>
            <param name="enumerationHandler">The enumeration handler.</param>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Impl.ISourceInjectedQueryable`1.AsQueryable">
            <summary>
            Casts itself to IQueryable&lt;T&gt; so no explicit casting is necessary
            </summary>
            <returns></returns>A
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Impl.IQueryDataSourceInjection`1.For``1">
            <summary>
            Creates the mapped query with an optional inspector
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Impl.IQueryDataSourceInjection`1.BeforeProjection(System.Linq.Expressions.ExpressionVisitor[])">
            <summary>
            ExpressionVisitors called before MappingVisitor itself is executed
            </summary>
            <param name="visitors">The visitors.</param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Impl.IQueryDataSourceInjection`1.AfterProjection(System.Linq.Expressions.ExpressionVisitor[])">
            <summary>
            ExpressionVisitors called after the MappingVisitor itself is executed
            </summary>
            <param name="visitors">The visitors.</param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Impl.IQueryDataSourceInjection`1.OnError(System.Action{System.Exception})">
            <summary>
            Allows specifying a handler that will be called when the underlying QueryProvider encounters an exception.
            This is especially useful if you expose the resulting IQueryable in e.g. a WebApi controller where
            you do not call "ToList" yourself and therefore cannot catch exceptions
            </summary>
            <param name="exceptionHandler">The exception handler.</param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Impl.QueryDataSourceInjection`1.BeforeProjection(System.Linq.Expressions.ExpressionVisitor[])">
            <summary>
            ExpressionVisitors called before MappingVisitor itself is executed
            </summary>
            <param name="visitors">The visitors.</param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Impl.QueryDataSourceInjection`1.AfterProjection(System.Linq.Expressions.ExpressionVisitor[])">
            <summary>
            ExpressionVisitors called after the MappingVisitor itself is executed
            </summary>
            <param name="visitors">The visitors.</param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.Impl.QueryDataSourceInjection`1.OnError(System.Action{System.Exception})">
            <summary>
            Allows specifying a handler that will be called when the underlying QueryProvider encounters an exception.
            This is especially useful if you expose the resulting IQueryable in e.g. a WebApi controller where
            you do not call "ToList" yourself and therefore cannot catch exceptions
            </summary>
            <param name="exceptionHandler">The exception handler.</param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.MapExpression``1(AutoMapper.IMapper,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Maps an expression given a dictionary of types where the source type is the key and the destination type is the value.
            </summary>
            <typeparam name="TDestDelegate"></typeparam>
            <param name="mapper"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.MapExpression``2(AutoMapper.IMapper,``0)">
            <summary>
            Maps an expression given a dictionary of types where the source type is the key and the destination type is the value.
            </summary>
            <typeparam name="TSourceDelegate"></typeparam>
            <typeparam name="TDestDelegate"></typeparam>
            <param name="mapper"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.MapExpressionAsInclude``1(AutoMapper.IMapper,System.Linq.Expressions.LambdaExpression)">
            <summary>
            Maps an expression to be used as an "Include" given a dictionary of types where the source type is the key and the destination type is the value.
            </summary>
            <typeparam name="TDestDelegate"></typeparam>
            <param name="mapper"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.MapExpressionAsInclude``2(AutoMapper.IMapper,``0)">
            <summary>
            Maps an expression to be used as an "Include" given a dictionary of types where the source type is the key and the destination type is the value.
            </summary>
            <typeparam name="TSourceDelegate"></typeparam>
            <typeparam name="TDestDelegate"></typeparam>
            <param name="mapper"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.MapExpressionList``2(AutoMapper.IMapper,System.Collections.Generic.ICollection{``0})">
            <summary>
            Maps a collection of expressions given a dictionary of types where the source type is the key and the destination type is the value.
            </summary>
            <typeparam name="TSourceDelegate"></typeparam>
            <typeparam name="TDestDelegate"></typeparam>
            <param name="mapper"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.MapExpressionList``1(AutoMapper.IMapper,System.Collections.Generic.IEnumerable{System.Linq.Expressions.LambdaExpression})">
            <summary>
            Maps a collection of expressions given a dictionary of types where the source type is the key and the destination type is the value.
            </summary>
            <typeparam name="TDestDelegate"></typeparam>
            <param name="mapper"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.MapIncludesList``2(AutoMapper.IMapper,System.Collections.Generic.ICollection{``0})">
            <summary>
            Maps a collection of expressions to be used as a "Includes" given a dictionary of types where the source type is the key and the destination type is the value.
            </summary>
            <typeparam name="TSourceDelegate"></typeparam>
            <typeparam name="TDestDelegate"></typeparam>
            <param name="mapper"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.MapIncludesList``1(AutoMapper.IMapper,System.Collections.Generic.IEnumerable{System.Linq.Expressions.LambdaExpression})">
            <summary>
            Maps a collection of expressions to be used as a "Includes" given a dictionary of types where the source type is the key and the destination type is the value.
            </summary>
            <typeparam name="TDestDelegate"></typeparam>
            <param name="mapper"></param>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.GetDestinationParameterExpressions(System.Linq.Expressions.LambdaExpression,AutoMapper.Extensions.ExpressionMapping.MapperInfoDictionary,System.Collections.Generic.Dictionary{System.Type,System.Type})">
            <summary>
            Takes a list of parameters from the source lamda expression and returns a list of parameters for the destination lambda expression.
            </summary>
            <param name="expression"></param>
            <param name="infoDictionary"></param>
            <param name="typeMappings"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.AddTypeMapping``2(System.Collections.Generic.Dictionary{System.Type,System.Type},AutoMapper.IConfigurationProvider)">
            <summary>
            Adds a new source and destination key-value pair to a dictionary of type mappings based on the generic arguments.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TDest"></typeparam>
            <param name="typeMappings"></param>
            <param name="configurationProvider"></param>
            <returns></returns>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.MapperExtensions.AddTypeMapping(System.Collections.Generic.Dictionary{System.Type,System.Type},AutoMapper.IConfigurationProvider,System.Type,System.Type)">
            <summary>
            Adds a new source and destination key-value pair to a dictionary of type mappings based on the arguments.
            </summary>
            <param name="typeMappings"></param>
            <param name="configurationProvider"></param>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <returns></returns>
        </member>
        <member name="T:AutoMapper.Extensions.ExpressionMapping.NullsafeQueryRewriter">
            <summary>
            Expression visitor for making member access null-safe.
            </summary>
            <remarks>
            NullSafeQueryRewriter is copied from the NeinLinq project, licensed under the MIT license.
            Copyright (c) 2014-2018 Axel Heer.
            See https://github.com/axelheer/nein-linq/blob/master/src/NeinLinq/NullsafeQueryRewriter.cs
            </remarks>
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.NullsafeQueryRewriter.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc />
        </member>
        <member name="M:AutoMapper.Extensions.ExpressionMapping.NullsafeQueryRewriter.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="T:AutoMapper.Extensions.ExpressionMapping.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.cannotCreateBinaryExpressionFormat">
            <summary>
              Looks up a localized string similar to Cannot create a binary expression for the following pair.  Node: {0}, Type: {1} and Node: {2}, Type: {3}..
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.cantRemapExpression">
            <summary>
              Looks up a localized string similar to Can&apos;t rempa expression.
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.customResolversNotSupported">
            <summary>
              Looks up a localized string similar to Custom resolvers are not supported for expression mapping..
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.expressionMapValueTypeMustMatchFormat">
            <summary>
              Looks up a localized string similar to The source and destination types must be the same for expression mapping between value types. Source Type: {0}, Source Description: {1}, Destination Type: {2}, Destination Property: {3}..
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.includeExpressionTooComplex">
            <summary>
              Looks up a localized string similar to The Include value-type expression uses multiple sibling navigation objects &quot;{0}&quot;, &quot;{1}&quot; and is too complex to translate..
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.invalidArgumentCount">
            <summary>
              Looks up a localized string similar to Source and destination must have the same number of arguments..
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.invalidExpErr">
            <summary>
              Looks up a localized string similar to Invalid expression type for this operation..
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.mappedMemberIsChildOfTheParameterFormat">
            <summary>
              Looks up a localized string similar to The mapped member {0} is of type {1} and a child of the parameter type {2}.  No reference type (parent of) {0} is available to map as an include..
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.mapperInfoDictionaryIsNull">
            <summary>
              Looks up a localized string similar to Mapper Info dictionary cannot be null..
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.mustBeExpressions">
            <summary>
              Looks up a localized string similar to Arguments must be expressions..
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.srcMemberCannotBeNullFormat">
            <summary>
              Looks up a localized string similar to SourceMember cannot be null. Source Type: {0}, Destination Type: {1}, Property: {2}..
            </summary>
        </member>
        <member name="P:AutoMapper.Extensions.ExpressionMapping.Resource.typeMappingsDictionaryIsNull">
            <summary>
              Looks up a localized string similar to Type Mappings dictionary cannot be null..
            </summary>
        </member>
        <member name="M:AutoMapper.ReflectionExtensions.ReplaceItemType(System.Type,System.Type,System.Type)">
            <summary>
            if targetType is oldType, method will return newType
            if targetType is not oldType, method will return targetType
            if targetType is generic type with oldType arguments, method will replace all oldType arguments on newType
            </summary>
            <param name="targetType"></param>
            <param name="oldType"></param>
            <param name="newType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
